#!/usr/bin/env bash
# This script was generated by bashly 1.2.1 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
ithactl_usage() {
  printf "ithactl - Command Line Tools for using ithadev's environment files.\n\n"

  printf "%s\n" "Usage:"
  printf "  ithactl COMMAND\n"
  printf "  ithactl [COMMAND] --help | -h\n"
  printf "  ithactl --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   List of configurations that can be applied.\n" "list  "
  printf "  %s   Apply configurations.\n" "apply "
  printf "  %s   Apply all configurations.\n" "all   "
  printf "  %s   Remove configurations.\n" "remove"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
ithactl_list_usage() {
  printf "ithactl list - List of configurations that can be applied.\n\n"
  printf "Alias: ls\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ithactl list\n"
  printf "  ithactl list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ithactl_apply_usage() {
  printf "ithactl apply - Apply configurations.\n\n"
  printf "Alias: ap\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ithactl apply NAME [OPTIONS]\n"
  printf "  ithactl apply --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--overwrite, -w"
    printf "    Overwrite existing configuration.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configuration.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--path, -p"
    printf "    Path to apply configuration.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Name of configuration applied.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  ithactl apply nvim ~/.config/nvim/\n"
    printf "  ithactl apply zsh ~/.config/zsh/ --overwrite\n"
    echo

  fi
}

# :command.usage
ithactl_all_usage() {
  printf "ithactl all - Apply all configurations.\n\n"

  printf "%s\n" "Usage:"
  printf "  ithactl all [OPTIONS]\n"
  printf "  ithactl all --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--overwrite, -w"
    printf "    Overwrite existing configurations.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--skip, -s"
    printf "    Skip existing configurations.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  ithactl all nvim\n"
    printf "  ithactl all zsh --overwrite\n"
    echo

  fi
}

# :command.usage
ithactl_remove_usage() {
  printf "ithactl remove - Remove configurations.\n\n"
  printf "Alias: rm\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ithactl remove [NAME] [OPTIONS]\n"
  printf "  ithactl remove --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--force, -f"
    printf "    Force remove configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Name of configuration applied.\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/constant.sh
# shellcheck shell=bash disable=SC2034
# List available configuration
configurations=("jgit" "mise" "neofetch" "nvim" "skhd" "starship" "tmux" "wezterm" "yabai" "zsh")

# Define source path
src_path_jgit="jgit/config"
src_path_mise="mise/config.toml"
src_path_neofetch="neofetch/config.conf"
src_path_nvim="nvim/*"
src_path_skhd="skhd/skhdrc"
src_path_starship="starship/starship.toml"
src_path_tmux="tmux/tmux.conf"
src_path_wezterm="wezterm/wezterm.lua"
src_path_yabai="yabai/yabairc"
src_path_zsh="zsh/zshrc"

# Define default path
# default_dst_path_jgit="${HOME}/.config/jgit/config"
# default_dst_path_mise="${HOME}/.config/mise/config.toml"
# default_dst_path_neofetch="${HOME}/.config/neofetch/config.conf"
# default_dst_path_nvim="${HOME}/.config/nvim"
# default_dst_path_skhd="${HOME}/.config/skhd/skhdrc"
# default_dst_path_starship="${HOME}/.config/starship/starship.toml"
# default_dst_path_tmux="${HOME}/.tmux.conf"
# default_dst_path_wezterm="${HOME}/.wezterm.lua"
# default_dst_path_yabai="${HOME}/.config/yabai/yabairc"
# default_dst_path_zsh="${HOME}/.zshrc"
#
default_dst_path_jgit="${HOME}/test/.config/jgit/config"
default_dst_path_mise="${HOME}/test/.config/mise/config.toml"
default_dst_path_neofetch="${HOME}/test/.config/neofetch/config.conf"
default_dst_path_nvim="${HOME}/test/.config/nvim/*"
default_dst_path_skhd="${HOME}/test/.config/skhd/skhdrc"
default_dst_path_starship="${HOME}/test/.config/starship/starship.toml"
default_dst_path_tmux="${HOME}/test/.tmux.conf"
default_dst_path_wezterm="${HOME}/test/.wezterm.lua"
default_dst_path_yabai="${HOME}/test/.config/yabai/yabairc"
default_dst_path_zsh="${HOME}/test/.zshrc"

# src/lib/print.sh
info() {
	printf "\r  [ \033[00;34m..\033[0m ] %s\n" "$1"
}

process() {
	printf "\r  [ \033[0;33m>>\033[0m ] %s\n" "$1"
}

success() {
	printf "\r\033[2K  [ \033[00;32mOK\033[0m ] %s\n" "$1"
}

fail() {
	printf "\r\033[2K  [\033[0;31mFAIL\033[0m] %s\n" "$1"
	exit
}

user() {
	printf "\r  [ \033[0;33m??\033[0m ] %s\n" "$1"
}

# src/lib/utils.sh
# shellcheck shell=bash disable=SC2154
check_config_available() {
	# The configuration to check
	config_check=$1

	# Flag to track if the config is found
	found=false

	# Loop through the array to check if the config is in the array
	for config in "${configurations[@]}"; do
		if [[ "$config" == "$config_check" ]]; then
			found=true
			break
		fi
	done

	# If the config is not found, perform the action
	if [[ "$found" == false ]]; then
		fail "Error: Configuration $config_check not found"
	fi
}

get_default_dst_config_path() {
	config=$1
	default_conf_path=default_dst_path_$config
	echo "${!default_conf_path}"
}

get_source_config_path() {
	config=$1
	source_conf_path=src_path_$config
	echo "${PWD}/${!source_conf_path}"
}

ensure_dst_config_path_exist() {
	local full_path="$1"
	local dir_path
	dir_path=$(dirname "$full_path")
	info "$dir_path"
	mkdir -p "$dir_path"
	info "Configuration path $dir_path has been created"
}

# :command.command_functions
# :command.function
ithactl_list_command() {
  # src/list_command.sh
  # shellcheck shell=bash disable=SC2154

  # List configurations
  info "Available configurations"
  for config in "${configurations[@]}"; do
  	if [[ -d "$config" ]]; then
  		info "- $config"
  	fi
  done

}

# :command.function
ithactl_apply_command() {
  # src/apply_command.sh
  # shellcheck shell=bash disable=SC2154
  # Get configuration name
  # TODO: Implement to check args short
  config_name=${args[name]}

  # Check if --path args not set, use default config dst
  if [[ ${args[--path]} ]]; then
  	config_dst=${args[--path]}
  else
  	config_dst=$(get_default_dst_config_path "$config_name")
  	ensure_dst_config_path_exist "$config_dst"
  fi
  config_src=$(get_source_config_path "$config_name")
  flag_overwrite=${args[--overwrite]}
  flag_backup=${args[--backup]}

  # Check if configuration input is available
  check_config_available "$config_name"

  # Check if both flags are set, and exit with an error if they are
  if [[ $flag_backup && $flag_overwrite ]]; then
  	fail "Error: Both --backup and --overwrite flags cannot be used together."
  	exit 1
  fi

  # Check if the path exists and is a file, directory, or symlink
  if [[ -f "$config_dst" || -d "$config_dst" || -L "$config_dst" ]]; then
  	if [[ $flag_overwrite ]]; then
  		rm -rf "$config_dst"
  		process "Successfully removed: $config_dst"
  	elif [[ $flag_backup ]]; then
  		mv "$config_dst" "${config_dst}.backup"
  		process "Successfully backed up: $config_dst to ${config_dst}.backup"
  	else
  		fail "Error: Configuration already exists: $config_dst"
  	fi
  fi

  ln -s "$config_src" "$config_dst"
  success "Apply configuration $config_name success."

}

# :command.function
ithactl_all_command() {
  # src/all_command.sh
  # shellcheck shell=bash disable=SC2154

  # Get flag
  overwrite_all=${args[--overwrite]}
  backup_all=${args[--backup]}
  skip_all=${args[--skip]}

  # TODO: Implement logic to check that three flag can not define at the same.

  # Check if both flags are set, and exit with an error if they are
  if [[ $flag_backup_all && $flag_overwrite_all ]]; then
  	fail "Error: Both --backup and --overwrite flags cannot be used together."
  	exit 1
  fi

  for config in "${configurations[@]}"; do
  	default_config_dst=$(get_default_dst_config_path "$config")
  	default_config_src=$(get_source_config_path "$config")

  	overwrite=
  	backup=
  	skip=
  	action=

  	if [[ -f "$default_config_dst" || -d "$default_config_dst" || -L "$default_config_dst" ]]; then
  		if [[ ! "$overwrite_all" || ! "$backup_all" || ! "$skip_all" ]]; then
  			current_src="$(readlink "$default_config_dst")"
  			if [[ "$current_src" == "$default_config_src" ]]; then
  				skip=true
  			else
  				user "File already exists: $DST ($(basename "$SRC")), what do you want to do?\n\
  	       [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"

  				read -r -n 1 action </dev/tty
  				case "$action" in
  				o)
  					overwrite=true
  					;;
  				O)
  					overwrite_all=true
  					;;
  				b)
  					backup=true
  					;;
  				B)
  					backup_all=true
  					;;
  				s)
  					skip=true
  					;;
  				S)
  					skip_all=true
  					;;
  				*) ;;
  				esac
  			fi
  		fi

  		overwrite=${overwrite:-$overwrite_all}
  		backup=${backup:-$backup_all}
  		skip=${skip:-$skip_all}

  		if [[ $overwrite ]]; then
  			rm -rf "$default_config_dst"
  			process "Successfully removed: $default_config_dst"
  		fi

  		if [[ $backup ]]; then
  			mv "$default_config_dst" "${default_config_dst}.backup"
  			process "Successfully backed up: $default_config_dst to ${default_config_dst}.backup"
  		fi

  		if [[ $skip ]]; then
  			process "Successfully skipd: $default_config_dst"
  		fi
  	else
  		# Ensure that the config dst path directory is exists
  		ensure_dst_config_path_exist "$default_config_dst"
  	fi

  	if [[ ! $skip ]]; then
  		# Apply config use symlink
  		ln -s "$default_config_src" "$default_config_dst"
  		success "Apply configuration $config success."
  	fi
  done

  success "All configuration apply success."

}

# :command.function
ithactl_remove_command() {
  # src/remove_command.sh
  echo "# this file is located in 'src/remove_command.sh'"
  echo "# code for 'ithacli remove' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        ithactl_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    list | ls)
      action="list"
      shift
      ithactl_list_parse_requirements "$@"
      shift $#
      ;;

    apply | ap)
      action="apply"
      shift
      ithactl_apply_parse_requirements "$@"
      shift $#
      ;;

    all)
      action="all"
      shift
      ithactl_all_parse_requirements "$@"
      shift $#
      ;;

    remove | rm)
      action="remove"
      shift
      ithactl_remove_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      ithactl_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ithactl_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ithactl_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ithactl_apply_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ithactl_apply_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="apply"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --overwrite | -w)

        # :flag.case_no_arg
        args['--overwrite']=1
        shift
        ;;

      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      # :flag.case
      --path | -p)

        # :flag.case_no_arg
        args['--path']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: ithactl apply NAME [OPTIONS]\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
ithactl_all_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ithactl_all_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="all"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --overwrite | -w)

        # :flag.case_no_arg
        args['--overwrite']=1
        shift
        ;;

      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      # :flag.case
      --skip | -s)

        # :flag.case_no_arg
        args['--skip']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ithactl_remove_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ithactl_remove_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="remove"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "list") ithactl_list_command ;;
    "apply") ithactl_apply_command ;;
    "all") ithactl_all_command ;;
    "remove") ithactl_remove_command ;;
  esac
}

initialize
run "$@"
