#!/usr/bin/env bash
# This script was generated by bashly 1.2.1 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
ithacli_usage() {
  printf "ithacli - Command Line Interface for using ithadev's environment files.\n\n"

  printf "%s\n" "Usage:"
  printf "  ithacli COMMAND\n"
  printf "  ithacli [COMMAND] --help | -h\n"
  printf "  ithacli --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   List of configurations that can be applied.\n" "list  "
  printf "  %s   Apply configurations.\n" "apply "
  printf "  %s   Remove configurations.\n" "remove"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
ithacli_list_usage() {
  printf "ithacli list - List of configurations that can be applied.\n\n"
  printf "Alias: ls\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ithacli list\n"
  printf "  ithacli list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ithacli_apply_usage() {
  printf "ithacli apply - Apply configurations.\n\n"
  printf "Alias: ap\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ithacli apply NAME [OPTIONS]\n"
  printf "  ithacli apply --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--overwrite, -w"
    printf "    Overwrite existing configuration.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configuration.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Name of configuration applied.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  ithacli apply nvim\n"
    printf "  ithacli apply zsh --overwrite\n"
    echo

  fi
}

# :command.usage
ithacli_remove_usage() {
  printf "ithacli remove - Remove configurations.\n\n"
  printf "Alias: rm\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ithacli remove SOURCE [OPTIONS]\n"
  printf "  ithacli remove --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--user, -u USER (required)"
    printf "    Username to use for logging in\n"
    echo

    # :flag.usage
    printf "  %s\n" "--password, -p PASSWORD"
    printf "    Password to use for logging in\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "SOURCE"
    printf "    File to upload\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/logging.sh
function error() {
	echo >&2 "[$(date +'%Y-%m-%dT%H:%M:%S')] ERROR: $1"
	shift
	for msg in "$@"; do echo >&2 "  $msg"; done
	exit 1
}
function log() {
	if ! [[ ${args[--quiet]} || $ITHACLI_QUIET ]]; then
		echo >&2 "[$(date +'%Y-%m-%dT%H:%M:%S')] $1"
		shift
		for msg in "$@"; do echo >&2 "  $msg"; done
	fi
}

# :command.command_functions
# :command.function
ithacli_list_command() {
  # src/list_command.sh
  directory="."
  # List of folder names to ignore
  ignore_list=("src" "fonts")

  # Function to check if a folder name is in the ignore list
  is_ignored() {
  	local folder_name="$1"
  	for ignore_folder in "${ignore_list[@]}"; do
  		if [[ "$folder_name" == "$ignore_folder" ]]; then
  			return 0
  		fi
  	done
  	return 1
  }

  # List configurations
  log "Available configurations"
  for config in "$directory"/*; do
  	if [[ -d "$config" ]]; then
  		config_name=$(basename "$config")
  		if ! is_ignored "$config_name"; then
  			printf "  - %s\n" "$config_name"
  		fi
  	# else
  	# 	error "Configurations directory not found."
  	fi
  done

}

# :command.function
ithacli_apply_command() {
  # src/apply_command.sh
  echo "# this file is located in 'src/remove_command.sh'"
  echo "# code for 'ithacli remove' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
ithacli_remove_command() {
  # src/remove_command.sh
  echo "# this file is located in 'src/remove_command.sh'"
  echo "# code for 'ithacli remove' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        ithacli_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    list | ls)
      action="list"
      shift
      ithacli_list_parse_requirements "$@"
      shift $#
      ;;

    apply | ap)
      action="apply"
      shift
      ithacli_apply_parse_requirements "$@"
      shift $#
      ;;

    remove | rm)
      action="remove"
      shift
      ithacli_remove_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      ithacli_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ithacli_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ithacli_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ithacli_apply_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ithacli_apply_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="apply"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --overwrite | -w)

        # :flag.case_no_arg
        args['--overwrite']=1
        shift
        ;;

      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: ithacli apply NAME [OPTIONS]\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
ithacli_remove_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ithacli_remove_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="remove"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --user | -u)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--user']="$2"
          shift
          shift
        else
          printf "%s\n" "--user requires an argument: --user, -u USER" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --password | -p)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--password']="$2"
          shift
          shift
        else
          printf "%s\n" "--password requires an argument: --password, -p PASSWORD" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['source']+x} ]]; then
          args['source']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['source']+x} ]]; then
    printf "missing required argument: SOURCE\nusage: ithacli remove SOURCE [OPTIONS]\n" >&2

    exit 1
  fi

  # :command.required_flags_filter
  if [[ -z ${args['--user']+x} ]]; then
    printf "missing required flag: --user, -u USER\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "list") ithacli_list_command ;;
    "apply") ithacli_apply_command ;;
    "remove") ithacli_remove_command ;;
  esac
}

initialize
run "$@"
